{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","React","forwardRef","ref","message","isUser","username","className","Card","style","borderRadius","lineHeight","width","CardContent","paddingTop","paddingRight","paddingBottom","paddingLeft","Typography","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","marginTop","FormControl","Input","placeholder","value","onChange","e","target","IconButton","disabled","replace","length","variant","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wUAsCeA,G,MAjCCC,IAAMC,YAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QAC5BC,EADyD,EAApBC,WACfF,EAAQE,SACpC,OACE,yBAAKC,UAAU,cACb,yBAAKJ,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC7C,yBAAKF,IAAKA,EAAKI,UAAU,mBACrBF,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MAGH,kBAACE,EAAA,EAAD,CACEC,MAAO,CACLC,aAAc,QACdC,WAAY,OACZC,MAAO,gBAGT,kBAACC,EAAA,EAAD,CACEN,UAAWF,EAAS,oBAAsB,qBAC1CI,MAAO,CACLK,WAAY,MACZC,aAAc,OACdC,cAAe,MACfC,YAAa,SAGf,kBAACC,EAAA,EAAD,KAAad,EAAQA,iB,iBCflBe,GAbKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGNT,IAASU,a,iCC0ELC,MAtEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,CAAC,CAAE1B,SAAU,GAAIF,QAAS,MAFtD,mBAEN+B,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGN1B,EAHM,KAGI+B,EAHJ,KA+Bb,OA1BAC,qBAAU,WACRnB,EAAGoB,WAAW,YACXC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXN,EACEM,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAAEC,GAAID,EAAIC,GAAI1C,QAASyC,EAAIE,iBAG5D,IAEHT,qBAAU,WACRD,EAAYW,OAAO,6BAClB,IAeD,yBAAKzC,UAAU,OACb,yBACE0C,IAAI,6FACJxC,MAAO,CAAEyC,UAAW,SAEtB,uCAAa5C,GACb,yBAAKC,UAAU,kBACb,0BAAMA,UAAU,aACd,kBAAC4C,EAAA,EAAD,CAAa5C,UAAU,oBACrB,kBAAC6C,EAAA,EAAD,CACE7C,UAAU,aACV8C,YAAY,mBACZC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAASsB,EAAEC,OAAOH,UAErC,kBAACI,EAAA,EAAD,CACEnD,UAAU,kBACVoD,UAAW1B,EAAM2B,QAAQ,MAAO,IAAIC,OACpCC,QAAQ,YACRC,MAAM,UACNC,KAAK,SACLC,QAlCQ,SAACT,GACnBA,EAAEU,iBAEF/C,EAAGoB,WAAW,YAAY4B,IAAI,CAC5B/D,QAAS6B,EACT3B,SAAUA,EACV8D,UAAWhD,IAASU,UAAUuC,WAAWC,oBAG3CpC,EAAS,MA2BC,kBAAC,IAAD,UAMR,kBAAC,IAAD,CAAU3B,UAAU,qBAAqBE,MAAO,CAAE,UAAW,OAC1D0B,EAASS,KAAI,gBAAGE,EAAH,EAAGA,GAAI1C,EAAP,EAAOA,QAAP,OACZ,kBAAC,EAAD,CAASmE,IAAKzB,EAAIxC,SAAUA,EAAUF,QAASA,UCpErCoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrF,c","file":"static/js/main.50ca7a7a.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./Message.css\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nconst Message = React.forwardRef(({ message, username }, ref) => {\r\n  const isUser = username === message.username;\r\n  return (\r\n    <div className=\"messageBox\">\r\n      <div ref={ref} className={`message ${isUser && \"message__user\"}`}>\r\n        <div ref={ref} className=\"mess__username\">\r\n          {!isUser && `${message.username || \"Unknown User\"}:`}\r\n        </div>\r\n\r\n        <Card\r\n          style={{\r\n            borderRadius: \"1.3em\",\r\n            lineHeight: \"1.34\",\r\n            width: \"fit-content\",\r\n          }}\r\n        >\r\n          <CardContent\r\n            className={isUser ? \"message__userCard\" : \"message__guestCard\"}\r\n            style={{\r\n              paddingTop: \"6px\",\r\n              paddingRight: \"12px\",\r\n              paddingBottom: \"7px\",\r\n              paddingLeft: \"12px\",\r\n            }}\r\n          >\r\n            <Typography>{message.message}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Message;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCPEVO4OmOGB1S8lSVX21scOZKAv3dDvOk\",\r\n  authDomain: \"messenger-clone-d5eb5.firebaseapp.com\",\r\n  databaseURL: \"https://messenger-clone-d5eb5.firebaseio.com\",\r\n  projectId: \"messenger-clone-d5eb5\",\r\n  storageBucket: \"messenger-clone-d5eb5.appspot.com\",\r\n  messagingSenderId: \"514790637197\",\r\n  appId: \"1:514790637197:web:d2afe3e212ec6367c46cc4\",\r\n  measurementId: \"G-JR6RGY3LYX\",\r\n});\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  Button,\n  FormControl,\n  Input,\n  InputLabel,\n  Container,\n  Grid,\n} from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { IconButton } from \"@material-ui/core\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([{ username: \"\", message: \"\" }]);\n  const [username, setUsername] = useState(\"\");\n\n  useEffect(() => {\n    db.collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setMessages(\n          snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() }))\n        );\n      });\n  }, []);\n\n  useEffect(() => {\n    setUsername(prompt(\"Please enter your name\"));\n  }, []);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    db.collection(\"messages\").add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <img\n        src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\"\n        style={{ marginTop: \"3px\" }}\n      />\n      <h2>Welcome {username}</h2>\n      <div className=\"form_container\">\n        <form className=\"app__form\">\n          <FormControl className=\"app__formControl\">\n            <Input\n              className=\"app__input\"\n              placeholder=\"Enter message...\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            />\n            <IconButton\n              className=\"app__iconButton\"\n              disabled={!input.replace(/\\s/g, \"\").length}\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={sendMessage}\n            >\n              <SendIcon />\n            </IconButton>\n          </FormControl>\n        </form>\n      </div>\n\n      <FlipMove className=\"messages_container\" style={{ \"z-index\": \"-1\" }}>\n        {messages.map(({ id, message }) => (\n          <Message key={id} username={username} message={message} />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}